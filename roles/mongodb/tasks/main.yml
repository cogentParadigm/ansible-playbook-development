---
- name: Install MongoDB
  include_tasks: "{{ item }}"
  with_first_found:
    - "install-{{ ansible_os_family }}.yml"
    - "install.yml"

- name: Check root password
  assert:
    that: mongodb_root_password != ''
    fail_msg: "You must specify a root password for MongoDB."
    quiet: yes

- name: Create conf directory
  file:
    path: "{{ mongodb_conf_path | dirname }}"
    recurse: yes
    state: directory
  become: true

- name: Create conf file
  template:
    src: templates/mongod.conf.j2
    dest: "{{ mongodb_conf_path }}"
    force: no
  become: true

- name: Add start/stop routines to ~/.bash_profile
  blockinfile:
    marker: "# MONGODB - {mark} ANSIBLE MANAGED BLOCK"
    block: "{{ lookup('file', 'templates/.bash_profile.j2') }}"
    dest: ~/.bash_profile
    backup: yes
  when: mongodb_create_aliases | bool

- name: Start MongoDB
  shell: sudo -u mongodb mongod -f {{ mongodb_conf_path }}"
  creates: "{{ mongdb_lock_path }}"
  become: true

- name: Ensure MongoDB is started
  shell: "[ \"$(cat {{ mongodb_lock_path }})\" != \"\" ] || sudo -u mongodb mongod -f {{ mongodb_conf_path }}"
  register: result
  changed_when: result.stdout != ''
  become: true

- name: Create root user
  shell: mongo admin -u root -p "{{ mongodb_root_password }}" --authenticationDatabase admin --eval "db.getUsers()" | grep "admin.root" || mongo admin --eval "db.createUser({user:'root',pwd:'{{ mongodb_root_password }}',roles:[{role:'root',db:'admin'}]});"
  register: hasRoot
  changed_when: "'Successfully added user' in hasRoot.stdout"
  failed_when: "'admin.root' not in hasRoot.stdout"

# - name: Secure installation
#   lineinfile: dest={{ mongodb_conf_path }} line="auth = true"
#   become: true
#   when: "'admin.root' in hasRoot.stdout"

- name: Create mongorc file
  lineinfile:
    dest: ~/.mongorc.js
    line: db.getSiblingDB("admin").auth("root", "{{ mongodb_root_password }}");
    state: present
    create: yes
  when: "'admin.root' in hasRoot.stdout"

